document.addEventListener("DOMContentLoaded", () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
    let tg = window.Telegram?.WebApp || {
        expand: () => {},
        ready: () => {},
        HapticFeedback: null,
        showAlert: null,
        showConfirm: null,
        CloudStorage: null,
        colorScheme: 'dark'
    };
    
    // –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    tg.expand();
    tg.ready();
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
    setTimeout(() => {
        if (tg.expand) {
            tg.expand();
        }
    }, 100);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è body
    function setFullHeight() {
        const vh = window.innerHeight;
        document.documentElement.style.setProperty('--vh', `${vh}px`);
        document.body.style.minHeight = `${vh}px`;
        document.body.style.height = `${vh}px`;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ä–∞–∑—É –∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
    setFullHeight();
    window.addEventListener('resize', setFullHeight);

    // –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    let transactions = [];
    let accounts = [];
    let isLoading = false;
    let editingTransactionId = null;
    let editingAccountId = null;

    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —ç–º–æ–¥–∑–∏
    const expenseCategories = {
        'food': 'üçï –ï–¥–∞',
        'transport': 'üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 
        'shopping': 'üõí –ü–æ–∫—É–ø–∫–∏',
        'entertainment': 'üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
        'health': 'üíä –ó–¥–æ—Ä–æ–≤—å–µ',
        'bills': 'üìÑ –°—á–µ—Ç–∞',
        'education': 'üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
        'sport': '‚öΩ –°–ø–æ—Ä—Ç',
        'beauty': 'üíÑ –ö—Ä–∞—Å–æ—Ç–∞',
        'home': 'üè† –î–æ–º',
        'other-expense': 'üì¶ –ü—Ä–æ—á–µ–µ'
    };

    const incomeCategories = {
        'salary': 'üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞',
        'freelance': 'üíª –§—Ä–∏–ª–∞–Ω',
        'business': 'üè¢ –ë–∏–∑–Ω–µ—Å',
        'investment': 'üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
        'gift': 'üéÅ –ü–æ–¥–∞—Ä–æ–∫',
        'bonus': 'üéØ –ü—Ä–µ–º–∏—è',
        'sale': 'üí∏ –ü—Ä–æ–¥–∞–∂–∞',
        'refund': '‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç',
        'other-income': 'üíµ –ü—Ä–æ—á–µ–µ'
    };

    const allCategories = {...expenseCategories, ...incomeCategories};

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    function showSyncStatus() {
        const syncStatus = document.getElementById('sync-status');
        if (syncStatus) {
            syncStatus.classList.remove('hidden');
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                syncStatus.classList.add('hidden');
            }, 2000);
        }
    }

    // Telegram Cloud Storage —Ñ—É–Ω–∫—Ü–∏–∏
    function saveToCloud() {
        if (isLoading) return;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        showSyncStatus();
        
        try {
            if (tg.CloudStorage) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                const transactionsData = JSON.stringify(transactions);
                const transactionChunks = [];
                const chunkSize = 900;
                
                for (let i = 0; i < transactionsData.length; i += chunkSize) {
                    transactionChunks.push(transactionsData.slice(i, i + chunkSize));
                }
                
                tg.CloudStorage.setItem('transactions_chunks_count', transactionChunks.length.toString());
                transactionChunks.forEach((chunk, index) => {
                    tg.CloudStorage.setItem(`transactions_${index}`, chunk);
                });

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—á–µ—Ç–∞
                const accountsData = JSON.stringify(accounts);
                tg.CloudStorage.setItem('accounts', accountsData);
                
                console.log('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Telegram Cloud');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Cloud:', error);
        }
        
        // –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∫–∞–∫ fallback
        localStorage.setItem('transactions', JSON.stringify(transactions));
        localStorage.setItem('accounts', JSON.stringify(accounts));
    }

    function loadFromCloud() {
        return new Promise((resolve) => {
            if (!tg.CloudStorage) {
                // Fallback –Ω–∞ localStorage
                const localTransactions = localStorage.getItem('transactions');
                const localAccounts = localStorage.getItem('accounts');
                transactions = JSON.parse(localTransactions || '[]');
                accounts = JSON.parse(localAccounts || '[]');
                initializeDefaultAccounts();
                resolve();
                return;
            }

            isLoading = true;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            tg.CloudStorage.getItem('transactions_chunks_count', (error, chunksCount) => {
                if (error || !chunksCount) {
                    transactions = JSON.parse(localStorage.getItem('transactions') || '[]');
                    loadAccountsFromCloud(resolve);
                } else {
                    const count = parseInt(chunksCount);
                    let loadedChunks = [];
                    let loadedCount = 0;

                    for (let i = 0; i < count; i++) {
                        tg.CloudStorage.getItem(`transactions_${i}`, (error, chunk) => {
                            if (!error && chunk) {
                                loadedChunks[i] = chunk;
                            }
                            loadedCount++;
                            
                            if (loadedCount === count) {
                                try {
                                    const fullData = loadedChunks.join('');
                                    transactions = JSON.parse(fullData || '[]');
                                } catch (parseError) {
                                    transactions = [];
                                }
                                
                                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—á–µ—Ç–∞
                                loadAccountsFromCloud(resolve);
                            }
                        });
                    }
                }
            });
        });
    }

    function loadAccountsFromCloud(callback) {
        if (!tg.CloudStorage) {
            accounts = JSON.parse(localStorage.getItem('accounts') || '[]');
            initializeDefaultAccounts();
            isLoading = false;
            updateAllBalances();
            callback();
            return;
        }

        tg.CloudStorage.getItem('accounts', (error, accountsData) => {
            if (!error && accountsData) {
                try {
                    accounts = JSON.parse(accountsData);
                } catch (parseError) {
                    accounts = [];
                }
            } else {
                accounts = JSON.parse(localStorage.getItem('accounts') || '[]');
            }
            
            initializeDefaultAccounts();
            isLoading = false;
            updateAllBalances();
            callback();
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    function initializeDefaultAccounts() {
        if (accounts.length === 0) {
            accounts = [
                {
                    id: 'cash',
                    name: '–ù–∞–ª–∏—á–Ω—ã–µ',
                    icon: 'üíµ',
                    balance: 0
                },
                {
                    id: 'card',
                    name: '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', 
                    icon: 'üí≥',
                    balance: 0
                }
            ];
            saveData();
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    function saveData() {
        saveToCloud();
    }

    // –í–µ–ª–∫–æ–º —ç–∫—Ä–∞–Ω
    window.startApp = function() {
        document.getElementById('welcome-screen').style.display = 'none';
        document.getElementById('main-app').style.display = 'block';
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ —á—Ç–æ –≤–µ–ª–∫–æ–º –ø–æ–∫–∞–∑–∞–ª–∏
        localStorage.setItem('welcome_shown', 'true');
        
        // –ï—â–µ —Ä–∞–∑ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–∫—Ä—ã—Ç—å –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        setTimeout(() => {
            if (tg.expand) {
                tg.expand();
            }
        }, 200);
        
        if (tg.HapticFeedback) {
            tg.HapticFeedback.impactOccurred('medium');
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–µ–ª–∫–æ–º
    function checkWelcome() {
        const welcomeShown = localStorage.getItem('welcome_shown');
        if (welcomeShown) {
            document.getElementById('welcome-screen').style.display = 'none';
            document.getElementById('main-app').style.display = 'block';
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    window.updateCategories = function() {
        const type = document.getElementById('type').value;
        const categoryGroup = document.getElementById('category-group');
        const fromAccountGroup = document.getElementById('from-account-group');
        const toAccountGroup = document.getElementById('to-account-group');
        const accountGroup = document.getElementById('account-group');
        const categorySelect = document.getElementById('category');
        
        if (type === 'transfer') {
            categoryGroup.classList.add('hidden');
            fromAccountGroup.classList.remove('hidden');
            toAccountGroup.classList.remove('hidden');
            accountGroup.classList.add('hidden');
            updateAccountSelects();
        } else {
            categoryGroup.classList.remove('hidden');
            fromAccountGroup.classList.add('hidden');
            toAccountGroup.classList.add('hidden');
            accountGroup.classList.remove('hidden');
            
            // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏
            categorySelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>';
            const categories = type === 'expense' ? expenseCategories : incomeCategories;
            
            Object.entries(categories).forEach(([value, label]) => {
                const option = document.createElement('option');
                option.value = value;
                option.textContent = label;
                categorySelect.appendChild(option);
            });
        }
        
        updateAccountSelect();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    window.updateEditCategories = function() {
        const type = document.getElementById('edit-type').value;
        const categoryGroup = document.getElementById('edit-category-group');
        const fromAccountGroup = document.getElementById('edit-from-account-group');
        const toAccountGroup = document.getElementById('edit-to-account-group');
        const accountGroup = document.getElementById('edit-account-group');
        const categorySelect = document.getElementById('edit-category');
        
        if (type === 'transfer') {
            categoryGroup.classList.add('hidden');
            fromAccountGroup.classList.remove('hidden');
            toAccountGroup.classList.remove('hidden');
            accountGroup.classList.add('hidden');
            updateEditAccountSelects();
        } else {
            categoryGroup.classList.remove('hidden');
            fromAccountGroup.classList.add('hidden');
            toAccountGroup.classList.add('hidden');
            accountGroup.classList.remove('hidden');
            
            // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏
            categorySelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>';
            const categories = type === 'expense' ? expenseCategories : incomeCategories;
            
            Object.entries(categories).forEach(([value, label]) => {
                const option = document.createElement('option');
                option.value = value;
                option.textContent = label;
                categorySelect.appendChild(option);
            });
        }
        
        updateEditAccountSelect();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    window.updatePeriodFilter = function() {
        const periodFilter = document.getElementById('period-filter');
        const customDateRange = document.getElementById('custom-date-range');
        const startDate = document.getElementById('start-date');
        const endDate = document.getElementById('end-date');
        
        if (periodFilter.value === 'custom') {
            customDateRange.classList.remove('hidden');
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (!startDate.value) {
                const today = new Date().toISOString().split('T')[0];
                endDate.value = today;
                // –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ - –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥
                const monthAgo = new Date();
                monthAgo.setMonth(monthAgo.getMonth() - 1);
                startDate.value = monthAgo.toISOString().split('T')[0];
            }
        } else {
            customDateRange.classList.add('hidden');
        }
        
        applyFilters();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Å—á–µ—Ç–æ–≤
    function updateAccountSelect() {
        const accountSelect = document.getElementById('account');
        if (accountSelect) {
            accountSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç</option>';
            
            accounts.forEach(account => {
                const option = document.createElement('option');
                option.value = account.id;
                option.textContent = `${account.icon} ${account.name}`;
                accountSelect.appendChild(option);
            });
        }
    }

    function updateAccountSelects() {
        const fromSelect = document.getElementById('from-account');
        const toSelect = document.getElementById('to-account');
        
        [fromSelect, toSelect].forEach(select => {
            if (select) {
                select.innerHTML = '';
                accounts.forEach(account => {
                    const option = document.createElement('option');
                    option.value = account.id;
                    option.textContent = `${account.icon} ${account.name}`;
                    select.appendChild(option);
                });
            }
        });
    }

    function updateEditAccountSelect() {
        const accountSelect = document.getElementById('edit-account');
        if (accountSelect) {
            accountSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç</option>';
            
            accounts.forEach(account => {
                const option = document.createElement('option');
                option.value = account.id;
                option.textContent = `${account.icon} ${account.name}`;
                accountSelect.appendChild(option);
            });
        }
    }

    function updateEditAccountSelects() {
        const fromSelect = document.getElementById('edit-from-account');
        const toSelect = document.getElementById('edit-to-account');
        
        [fromSelect, toSelect].forEach(select => {
            if (select) {
                select.innerHTML = '';
                accounts.forEach(account => {
                    const option = document.createElement('option');
                    option.value = account.id;
                    option.textContent = `${account.icon} ${account.name}`;
                    select.appendChild(option);
                });
            }
        });
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤
    window.showTab = function(tabName) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞–±—ã
        document.querySelectorAll('.tab-content').forEach(tab => {
            tab.classList.add('hidden');
        });
        
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.querySelectorAll('.nav-item').forEach(nav => {
            nav.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Ç–∞–±
        const targetTab = document.getElementById(tabName + '-tab');
        if (targetTab) {
            targetTab.classList.remove('hidden');
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –Ω–∞–∂–∞—Ç–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const activeNavItem = document.querySelector(`[onclick="showTab('${tabName}')"]`);
        if (activeNavItem) {
            activeNavItem.classList.add('active');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞–±–∞
        if (tabName === 'history') {
            updateFilters();
            applyFilters();
        } else if (tabName === 'stats') {
            displayStats();
        } else if (tabName === 'accounts') {
            displayAccounts();
        }

        if (tg.HapticFeedback) {
            tg.HapticFeedback.impactOccurred('light');
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    window.addTransaction = function() {
        const type = document.getElementById('type').value;
        const amount = parseFloat(document.getElementById('amount').value);
        const description = document.getElementById('description').value;

        if (!amount || amount <= 0) {
            if (tg.showAlert) {
                tg.showAlert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
            } else {
                alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
            }
            return;
        }

        if (type === 'transfer') {
            const fromAccountId = document.getElementById('from-account').value;
            const toAccountId = document.getElementById('to-account').value;
            
            if (!fromAccountId || !toAccountId) {
                if (tg.showAlert) {
                    tg.showAlert('–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞');
                } else {
                    alert('–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞');
                }
                return;
            }
            
            if (fromAccountId === toAccountId) {
                if (tg.showAlert) {
                    tg.showAlert('–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–∞ —Ç–æ—Ç –∂–µ —Å—á—ë—Ç');
                } else {
                    alert('–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–∞ —Ç–æ—Ç –∂–µ —Å—á—ë—Ç');
                }
                return;
            }

            const fromAccount = accounts.find(a => a.id === fromAccountId);
            const toAccount = accounts.find(a => a.id === toAccountId);

            if (fromAccount.balance < amount) {
                if (tg.showAlert) {
                    tg.showAlert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á—ë—Ç–µ');
                } else {
                    alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á—ë—Ç–µ');
                }
                return;
            }

            const transaction = {
                id: Date.now(),
                type: 'transfer',
                amount: amount,
                fromAccount: fromAccountId,
                toAccount: toAccountId,
                description: description || `–ü–µ—Ä–µ–≤–æ–¥ ${fromAccount.name} ‚Üí ${toAccount.name}`,
                date: new Date().toISOString()
            };

            transactions.unshift(transaction);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã —Å—á–µ—Ç–æ–≤
            fromAccount.balance -= amount;
            toAccount.balance += amount;
        } else {
            const category = document.getElementById('category').value;
            const accountId = document.getElementById('account').value;
            
            if (!category) {
                if (tg.showAlert) {
                    tg.showAlert('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
                } else {
                    alert('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
                }
                return;
            }
            
            if (!accountId) {
                if (tg.showAlert) {
                    tg.showAlert('–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç');
                } else {
                    alert('–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç');
                }
                return;
            }
            
            const account = accounts.find(a => a.id === accountId);

            const transaction = {
                id: Date.now(),
                type: type,
                amount: amount,
                category: category,
                account: accountId,
                description: description,
                date: new Date().toISOString()
            };

            transactions.unshift(transaction);

            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞
            if (type === 'income') {
                account.balance += amount;
            } else {
                account.balance -= amount;
            }
        }

        saveData();
        updateAllBalances();
        clearForm();

        if (tg.HapticFeedback) {
            tg.HapticFeedback.notificationOccurred('success');
        }

        if (tg.showAlert) {
            tg.showAlert('–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
        }
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    window.editTransaction = function(id) {
        const transaction = transactions.find(t => t.id === id);
        if (!transaction) return;

        editingTransactionId = id;

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        document.getElementById('edit-type').value = transaction.type;
        document.getElementById('edit-amount').value = transaction.amount;
        document.getElementById('edit-description').value = transaction.description || '';

        if (transaction.type === 'transfer') {
            document.getElementById('edit-from-account').value = transaction.fromAccount;
            document.getElementById('edit-to-account').value = transaction.toAccount;
        } else {
            document.getElementById('edit-category').value = transaction.category;
            document.getElementById('edit-account').value = transaction.account;
        }

        updateEditCategories();
        document.getElementById('edit-modal').classList.remove('hidden');

        if (tg.HapticFeedback) {
            tg.HapticFeedback.impactOccurred('light');
        }
    }

    window.closeEditModal = function() {
        document.getElementById('edit-modal').classList.add('hidden');
        editingTransactionId = null;
    }

    window.saveEditTransaction = function() {
        if (!editingTransactionId) return;

        const transaction = transactions.find(t => t.id === editingTransactionId);
        if (!transaction) return;

        const type = document.getElementById('edit-type').value;
        const amount = parseFloat(document.getElementById('edit-amount').value);
        const description = document.getElementById('edit-description').value;

        if (!amount || amount <= 0) {
            if (tg.showAlert) {
                tg.showAlert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
            } else {
                alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
            }
            return;
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–ª–∞–Ω—Å–∞—Ö
        if (transaction.type === 'transfer') {
            const oldFromAccount = accounts.find(a => a.id === transaction.fromAccount);
            const oldToAccount = accounts.find(a => a.id === transaction.toAccount);
            if (oldFromAccount) oldFromAccount.balance += transaction.amount;
            if (oldToAccount) oldToAccount.balance -= transaction.amount;
        } else {
            const oldAccount = accounts.find(a => a.id === transaction.account);
            if (oldAccount) {
                if (transaction.type === 'income') {
                    oldAccount.balance -= transaction.amount;
                } else {
                    oldAccount.balance += transaction.amount;
                }
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        if (type === 'transfer') {
            const fromAccountId = document.getElementById('edit-from-account').value;
            const toAccountId = document.getElementById('edit-to-account').value;
            
            if (!fromAccountId || !toAccountId) {
                if (tg.showAlert) {
                    tg.showAlert('–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞');
                } else {
                    alert('–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞');
                }
                return;
            }
            
            if (fromAccountId === toAccountId) {
                if (tg.showAlert) {
                    tg.showAlert('–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–∞ —Ç–æ—Ç –∂–µ —Å—á—ë—Ç');
                } else {
                    alert('–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–∞ —Ç–æ—Ç –∂–µ —Å—á—ë—Ç');
                }
                return;
            }

            const fromAccount = accounts.find(a => a.id === fromAccountId);
            const toAccount = accounts.find(a => a.id === toAccountId);

            if (fromAccount.balance < amount) {
                if (tg.showAlert) {
                    tg.showAlert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á—ë—Ç–µ');
                } else {
                    alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á—ë—Ç–µ');
                }
                return;
            }

            transaction.type = 'transfer';
            transaction.amount = amount;
            transaction.fromAccount = fromAccountId;
            transaction.toAccount = toAccountId;
            transaction.description = description || `–ü–µ—Ä–µ–≤–æ–¥ ${fromAccount.name} ‚Üí ${toAccount.name}`;
            delete transaction.category;
            delete transaction.account;

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            fromAccount.balance -= amount;
            toAccount.balance += amount;
        } else {
            const category = document.getElementById('edit-category').value;
            const accountId = document.getElementById('edit-account').value;
            
            if (!category) {
                if (tg.showAlert) {
                    tg.showAlert('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
                } else {
                    alert('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
                }
                return;
            }
            
            if (!accountId) {
                if (tg.showAlert) {
                    tg.showAlert('–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç');
                } else {
                    alert('–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç');
                }
                return;
            }

            const account = accounts.find(a => a.id === accountId);

            transaction.type = type;
            transaction.amount = amount;
            transaction.category = category;
            transaction.account = accountId;
            transaction.description = description;
            delete transaction.fromAccount;
            delete transaction.toAccount;

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if (type === 'income') {
                account.balance += amount;
            } else {
                account.balance -= amount;
            }
        }

        saveData();
        updateAllBalances();
        applyFilters();
        closeEditModal();

        if (tg.HapticFeedback) {
            tg.HapticFeedback.notificationOccurred('success');
        }

        if (tg.showAlert) {
            tg.showAlert('–û–ø–µ—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
        }
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞
    window.editAccount = function(accountId) {
        const account = accounts.find(a => a.id === accountId);
        if (!account) return;

        editingAccountId = accountId;

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        document.getElementById('edit-account-name').value = account.name;
        document.getElementById('edit-account-icon').value = account.icon;
        document.getElementById('account-balance-correction').value = '';

        document.getElementById('edit-account-modal').classList.remove('hidden');

        if (tg.HapticFeedback) {
            tg.HapticFeedback.impactOccurred('light');
        }
    }

    window.closeEditAccountModal = function() {
        document.getElementById('edit-account-modal').classList.add('hidden');
        editingAccountId = null;
    }

    window.saveEditAccount = function() {
        if (!editingAccountId) return;

        const account = accounts.find(a => a.id === editingAccountId);
        if (!account) return;

        const newName = document.getElementById('edit-account-name').value.trim();
        const newIcon = document.getElementById('edit-account-icon').value;
        const balanceCorrection = parseFloat(document.getElementById('account-balance-correction').value) || 0;

        if (!newName) {
            if (tg.showAlert) {
                tg.showAlert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á—ë—Ç–∞');
            } else {
                alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á—ë—Ç–∞');
            }
            return;
        }

        const oldName = account.name;
        const oldIcon = account.icon;

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞
        account.name = newName;
        account.icon = newIcon;
        account.balance += balanceCorrection;

        // –ï—Å–ª–∏ –±—ã–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞, —Å–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        if (balanceCorrection !== 0) {
            const transaction = {
                id: Date.now(),
                type: balanceCorrection > 0 ? 'income' : 'expense',
                amount: Math.abs(balanceCorrection),
                category: balanceCorrection > 0 ? 'other-income' : 'other-expense',
                account: editingAccountId,
                description: `–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å—á—ë—Ç–∞ "${newName}" (–±—ã–ª–æ: ${oldName})`,
                date: new Date().toISOString()
            };
            transactions.unshift(transaction);
        }

        // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∏–∫–æ–Ω–∫–∞, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        if (oldName !== newName || oldIcon !== newIcon) {
            const transaction = {
                id: Date.now() + 1, // +1 —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è ID
                type: 'account-edit',
                amount: 0,
                account: editingAccountId,
                description: `–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—á—ë—Ç–∞: "${oldName}" ${oldIcon} ‚Üí "${newName}" ${newIcon}`,
                date: new Date().toISOString()
            };
            transactions.unshift(transaction);
        }

        saveData();
        updateAllBalances();
        displayAccounts();
        updateAccountSelect();
        updateFilters();
        closeEditAccountModal();

        if (tg.HapticFeedback) {
            tg.HapticFeedback.notificationOccurred('success');
        }

        if (tg.showAlert) {
            tg.showAlert('–°—á—ë—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!');
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
    function clearForm() {
        document.getElementById('amount').value = '';
        document.getElementById('description').value = '';
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤
    function updateAllBalances() {
        // –û–±—â–∏–π –±–∞–ª–∞–Ω—Å
        const totalBalance = accounts.reduce((sum, account) => sum + account.balance, 0);
        const balanceElement = document.getElementById('total-balance');
        if (balanceElement) {
            balanceElement.textContent = formatCurrency(totalBalance);
            
            balanceElement.className = 'total-balance';
            if (totalBalance > 0) {
                balanceElement.classList.add('positive');
            } else if (totalBalance < 0) {
                balanceElement.classList.add('negative');
            }
        }

        // –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å—á–µ—Ç–∞–º
        const accountsSummary = document.getElementById('accounts-summary');
        if (accountsSummary) {
            accountsSummary.innerHTML = accounts.map(account => 
                `<div class="account-chip">${account.icon} ${formatCurrency(account.balance)}</div>`
            ).join('');
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    function updateFilters() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const categoryFilter = document.getElementById('category-filter');
        if (categoryFilter) {
            categoryFilter.innerHTML = '<option value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>';
            
            const usedCategories = [...new Set(transactions.filter(t => t.category).map(t => t.category))];
            usedCategories.forEach(category => {
                const option = document.createElement('option');
                option.value = category;
                option.textContent = allCategories[category] || category;
                categoryFilter.appendChild(option);
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Å—á–µ—Ç–æ–≤
        const accountFilter = document.getElementById('account-filter');
        if (accountFilter) {
            accountFilter.innerHTML = '<option value="all">–í—Å–µ —Å—á–µ—Ç–∞</option>';
            
            accounts.forEach(account => {
                const option = document.createElement('option');
                option.value = account.id;
                option.textContent = `${account.icon} ${account.name}`;
                accountFilter.appendChild(option);
            });
        }
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    window.applyFilters = function() {
        const periodFilter = document.getElementById('period-filter');
        const categoryFilter = document.getElementById('category-filter');
        const typeFilter = document.getElementById('type-filter');
        const accountFilter = document.getElementById('account-filter');

        if (!periodFilter || !categoryFilter || !typeFilter || !accountFilter) {
            return;
        }

        let filteredTransactions = [...transactions];

        // –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É
        if (periodFilter.value !== 'all') {
            const now = new Date();
            let startDate, endDate;
            
            if (periodFilter.value === 'custom') {
                const startInput = document.getElementById('start-date');
                const endInput = document.getElementById('end-date');
                
                if (startInput.value && endInput.value) {
                    startDate = new Date(startInput.value);
                    endDate = new Date(endInput.value);
                    endDate.setHours(23, 59, 59, 999); // –í–∫–ª—é—á–∞–µ–º –≤–µ—Å—å –¥–µ–Ω—å
                }
            } else {
                startDate = new Date();
                switch (periodFilter.value) {
                    case 'today':
                        startDate.setHours(0, 0, 0, 0);
                        endDate = new Date();
                        endDate.setHours(23, 59, 59, 999);
                        break;
                    case 'week':
                        startDate.setDate(now.getDate() - 7);
                        endDate = now;
                        break;
                    case 'month':
                        startDate.setMonth(now.getMonth() - 1);
                        endDate = now;
                        break;
                    case 'quarter':
                        startDate.setMonth(now.getMonth() - 3);
                        endDate = now;
                        break;
                }
            }
            
            if (startDate && endDate) {
                filteredTransactions = filteredTransactions.filter(t => {
                    const transactionDate = new Date(t.date);
                    return transactionDate >= startDate && transactionDate <= endDate;
                });
            }
        }

        // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        if (categoryFilter.value !== 'all') {
            filteredTransactions = filteredTransactions.filter(t => t.category === categoryFilter.value);
        }
        
        if (typeFilter.value !== 'all') {
            filteredTransactions = filteredTransactions.filter(t => t.type === typeFilter.value);
        }
        
        if (accountFilter.value !== 'all') {
            filteredTransactions = filteredTransactions.filter(t => 
                t.account === accountFilter.value || t.fromAccount === accountFilter.value || t.toAccount === accountFilter.value
            );
        }

        displayFilteredTransactions(filteredTransactions);
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    function displayFilteredTransactions(filteredTransactions) {
        const listElement = document.getElementById('transaction-list');
        if (!listElement) return;
        
        if (filteredTransactions.length === 0) {
            listElement.innerHTML = '<div class="empty-state"><p>–û–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p></div>';
            return;
        }

        const transactionsHTML = filteredTransactions.map(transaction => {
            const date = new Date(transaction.date).toLocaleDateString('ru-RU');
            let categoryName = '';
            let accountInfo = '';

            if (transaction.type === 'transfer') {
                const fromAccount = accounts.find(a => a.id === transaction.fromAccount);
                const toAccount = accounts.find(a => a.id === transaction.toAccount);
                categoryName = `${fromAccount?.icon} ‚Üí ${toAccount?.icon} –ü–µ—Ä–µ–≤–æ–¥`;
            } else if (transaction.type === 'account-edit') {
                categoryName = `‚öôÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—á—ë—Ç–∞`;
                const account = accounts.find(a => a.id === transaction.account);
                accountInfo = `<div class="transaction-account">${account?.icon} ${account?.name}</div>`;
            } else {
                categoryName = allCategories[transaction.category] || transaction.category;
                const account = accounts.find(a => a.id === transaction.account);
                accountInfo = `<div class="transaction-account">${account?.icon} ${account?.name}</div>`;
            }
            
            let amountDisplay = '';
            let actionsHtml = '';
            
            if (transaction.type === 'account-edit') {
                amountDisplay = '';
                actionsHtml = ''; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            } else {
                amountDisplay = `${transaction.type === 'income' ? '+' : (transaction.type === 'transfer' ? '' : '-')}${formatCurrency(transaction.amount)}`;
                actionsHtml = `
                    <div class="transaction-actions">
                        <button class="edit-btn" onclick="editTransaction(${transaction.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                        <button class="delete-btn" onclick="deleteTransaction(${transaction.id})" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                    </div>
                `;
            }
            
            return `
                <div class="transaction-item">
                    <div class="transaction-info" ${transaction.type !== 'account-edit' ? `onclick="editTransaction(${transaction.id})"` : ''}>
                        <div class="transaction-category">${categoryName}</div>
                        <div class="transaction-date">${date}</div>
                        ${accountInfo}
                        ${transaction.description ? `<div style="font-size: 12px; color: var(--tg-theme-hint-color, #999);">${transaction.description}</div>` : ''}
                    </div>
                    <div class="transaction-amount ${transaction.type}">
                        ${amountDisplay}
                    </div>
                    ${actionsHtml}
                </div>
            `;
        }).join('');

        listElement.innerHTML = transactionsHTML;
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    window.clearFilters = function() {
        const periodFilter = document.getElementById('period-filter');
        const categoryFilter = document.getElementById('category-filter');
        const typeFilter = document.getElementById('type-filter');
        const accountFilter = document.getElementById('account-filter');
        const customDateRange = document.getElementById('custom-date-range');

        if (periodFilter) periodFilter.value = 'all';
        if (categoryFilter) categoryFilter.value = 'all';
        if (typeFilter) typeFilter.value = 'all';
        if (accountFilter) accountFilter.value = 'all';
        if (customDateRange) customDateRange.classList.add('hidden');
        
        applyFilters();
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    window.deleteTransaction = function(id) {
        if (tg.showConfirm) {
            tg.showConfirm('–£–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é?', (confirmed) => {
                if (confirmed) {
                    performDeleteTransaction(id);
                }
            });
        } else {
            if (confirm('–£–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é?')) {
                performDeleteTransaction(id);
            }
        }
    }

    function performDeleteTransaction(id) {
        const transaction = transactions.find(t => t.id === id);
        if (!transaction) return;
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–ª–∞–Ω—Å–∞—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
        if (transaction.type !== 'account-edit') {
            if (transaction.type === 'transfer') {
                const fromAccount = accounts.find(a => a.id === transaction.fromAccount);
                const toAccount = accounts.find(a => a.id === transaction.toAccount);
                if (fromAccount) fromAccount.balance += transaction.amount;
                if (toAccount) toAccount.balance -= transaction.amount;
            } else {
                const account = accounts.find(a => a.id === transaction.account);
                if (account) {
                    if (transaction.type === 'income') {
                        account.balance -= transaction.amount;
                    } else {
                        account.balance += transaction.amount;
                    }
                }
            }
        }

        transactions = transactions.filter(t => t.id !== id);
        saveData();
        updateAllBalances();
        applyFilters();
        
        if (tg.HapticFeedback) {
            tg.HapticFeedback.notificationOccurred('success');
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤
    function displayAccounts() {
        const accountsGrid = document.getElementById('accounts-grid');
        if (!accountsGrid) return;
        
        const accountsHTML = accounts.map(account => `
            <div class="account-card">
                <div class="account-header">
                    <div>
                        <div class="account-name">${account.name}</div>
                    </div>
                    <div class="account-icon">${account.icon}</div>
                </div>
                <div class="account-balance ${account.balance >= 0 ? 'positive' : 'negative'}">
                    ${formatCurrency(account.balance)}
                </div>
                <div class="account-actions">
                    <button class="account-edit-btn" onclick="editAccount('${account.id}')">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                    <button class="account-delete-btn" onclick="deleteAccount('${account.id}')">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>
        `).join('');

        accountsGrid.innerHTML = accountsHTML;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—á—ë—Ç–∞
    window.addAccount = function() {
        const name = document.getElementById('new-account-name').value.trim();
        const icon = document.getElementById('new-account-icon').value;
        const balance = parseFloat(document.getElementById('new-account-balance').value) || 0;

        if (!name) {
            if (tg.showAlert) {
                tg.showAlert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á—ë—Ç–∞');
            } else {
                alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á—ë—Ç–∞');
            }
            return;
        }

        const newAccount = {
            id: 'account_' + Date.now(),
            name: name,
            icon: icon,
            balance: balance
        };

        accounts.push(newAccount);
        
        // –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—á—ë—Ç —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º, —Å–æ–∑–¥–∞—ë–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        if (balance !== 0) {
            const transaction = {
                id: Date.now(),
                type: balance > 0 ? 'income' : 'expense',
                amount: Math.abs(balance),
                category: balance > 0 ? 'other-income' : 'other-expense',
                account: newAccount.id,
                description: `–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞ "${name}"`,
                date: new Date().toISOString()
            };
            transactions.unshift(transaction);
        }

        saveData();
        updateAllBalances();
        displayAccounts();
        updateAccountSelect();

        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('new-account-name').value = '';
        document.getElementById('new-account-balance').value = '';

        if (tg.HapticFeedback) {
            tg.HapticFeedback.notificationOccurred('success');
        }

        if (tg.showAlert) {
            tg.showAlert('–°—á—ë—Ç –¥–æ–±–∞–≤–ª–µ–Ω!');
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å—á—ë—Ç–∞
    window.deleteAccount = function(accountId) {
        const account = accounts.find(a => a.id === accountId);
        if (!account) return;
        
        if (tg.showConfirm) {
            tg.showConfirm(`–£–¥–∞–ª–∏—Ç—å —Å—á—ë—Ç "${account.name}"? –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.`, (confirmed) => {
                if (confirmed) {
                    performDeleteAccount(accountId);
                }
            });
        } else {
            if (confirm(`–£–¥–∞–ª–∏—Ç—å —Å—á—ë—Ç "${account.name}"? –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.`)) {
                performDeleteAccount(accountId);
            }
        }
    }

    function performDeleteAccount(accountId) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å—á—ë—Ç–æ–º
        transactions = transactions.filter(t => 
            t.account !== accountId && 
            t.fromAccount !== accountId && 
            t.toAccount !== accountId
        );
        
        // –£–¥–∞–ª—è–µ–º —Å—á—ë—Ç
        accounts = accounts.filter(a => a.id !== accountId);
        
        saveData();
        updateAllBalances();
        displayAccounts();
        updateAccountSelect();
        
        if (tg.HapticFeedback) {
            tg.HapticFeedback.notificationOccurred('success');
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    function displayStats() {
        const income = transactions
            .filter(t => t.type === 'income')
            .reduce((sum, t) => sum + t.amount, 0);
            
        const expenses = transactions
            .filter(t => t.type === 'expense')
            .reduce((sum, t) => sum + t.amount, 0);

        const totalIncomeEl = document.getElementById('total-income');
        const totalExpensesEl = document.getElementById('total-expenses');
        
        if (totalIncomeEl) totalIncomeEl.textContent = formatCurrency(income);
        if (totalExpensesEl) totalExpensesEl.textContent = formatCurrency(expenses);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–∞—Å—Ö–æ–¥–æ–≤
        const expensesByCategory = {};
        transactions
            .filter(t => t.type === 'expense')
            .forEach(t => {
                expensesByCategory[t.category] = (expensesByCategory[t.category] || 0) + t.amount;
            });

        const expenseHTML = Object.entries(expensesByCategory)
            .sort(([,a], [,b]) => b - a)
            .map(([category, amount]) => `
                <div class="category-item">
                    <span>${allCategories[category] || category}</span>
                    <span>${formatCurrency(amount)}</span>
                </div>
            `).join('');

        const expenseBreakdown = document.getElementById('expense-breakdown');
        if (expenseBreakdown) {
            expenseBreakdown.innerHTML = 
                expenseHTML || '<div class="empty-state">–†–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</div>';
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–æ—Ö–æ–¥–æ–≤
        const incomesByCategory = {};
        transactions
            .filter(t => t.type === 'income')
            .forEach(t => {
                incomesByCategory[t.category] = (incomesByCategory[t.category] || 0) + t.amount;
            });

        const incomeHTML = Object.entries(incomesByCategory)
            .sort(([,a], [,b]) => b - a)
            .map(([category, amount]) => `
                <div class="category-item">
                    <span>${allCategories[category] || category}</span>
                    <span style="color: #4CAF50;">${formatCurrency(amount)}</span>
                </div>
            `).join('');

        const incomeBreakdown = document.getElementById('income-breakdown');
        if (incomeBreakdown) {
            incomeBreakdown.innerHTML = 
                incomeHTML || '<div class="empty-state">–î–æ—Ö–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</div>';
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—á–µ—Ç–∞–º
        const accountsHTML = accounts.map(account => `
            <div class="category-item">
                <span>${account.icon} ${account.name}</span>
                <span style="color: ${account.balance >= 0 ? '#4CAF50' : '#f44336'};">${formatCurrency(account.balance)}</span>
            </div>
        `).join('');

        const accountsBreakdown = document.getElementById('accounts-breakdown');
        if (accountsBreakdown) {
            accountsBreakdown.innerHTML = accountsHTML;
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
    function formatCurrency(amount) {
        return new Intl.NumberFormat('ru-RU').format(amount) + ' ‚ÇΩ';
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    function setupFilterHandlers() {
        const filterElements = [
            'period-filter', 'category-filter', 'type-filter', 'account-filter',
            'start-date', 'end-date'
        ];
        
        filterElements.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.addEventListener('change', applyFilters);
            }
        });

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
        const periodFilter = document.getElementById('period-filter');
        if (periodFilter) {
            periodFilter.addEventListener('change', updatePeriodFilter);
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    async function init() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–µ–ª–∫–æ–º
            checkWelcome();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            const balanceElement = document.getElementById('total-balance');
            if (balanceElement) {
                balanceElement.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞
            await loadFromCloud();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            updateAllBalances();
            updateCategories();
            setupFilterHandlers();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤–æ–π —Ç–µ–º—ã
            document.documentElement.style.setProperty('--tg-color-scheme', tg.colorScheme);
            
            console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    init();
});
